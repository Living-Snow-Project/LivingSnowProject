// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CustomTextInput tests renders on android 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    dataSet={Object {}}
    style={
      Object {
        "width": "100%",
      }
    }
  >
    <View
      dataSet={Object {}}
      feedbackId="field-3-feedback"
      hasFeedbackText={false}
      hasHelpText={false}
      helpTextId="field-3-helptext"
      isDisabled={false}
      isInvalid={false}
      isReadOnly={false}
      isRequired={false}
      labelId="field-3-label"
      nativeID="field-3-label"
      setHasFeedbackText={[Function]}
      setHasHelpText={[Function]}
      style={
        Object {
          "flexDirection": "row",
          "justifyContent": "flex-start",
          "marginBottom": 4,
          "marginTop": 4,
        }
      }
    >
      <Text
        dataSet={Object {}}
        style={
          Object {
            "backgroundColor": undefined,
            "color": "#737373",
            "fontFamily": undefined,
            "fontSize": 14,
            "fontStyle": "normal",
            "fontWeight": "500",
            "letterSpacing": 0,
            "lineHeight": 21,
            "textDecorationLine": undefined,
          }
        }
      >
        test custom text input
      </Text>
    </View>
    <View
      dataSet={Object {}}
      isFocused={false}
      style={
        Object {
          "alignItems": "center",
          "borderBottomWidth": 1,
          "borderColor": "#d4d4d4",
          "borderRadius": 0,
          "borderWidth": 0,
          "flexDirection": "row",
          "overflow": "hidden",
        }
      }
    >
      <TextInput
        accessible={true}
        blurOnSubmit={true}
        dataSet={Object {}}
        disabled={false}
        editable={true}
        isRequired={false}
        maxLength={255}
        multiline={true}
        nativeID="field-3-input"
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onKeyPress={[Function]}
        onSubmitEditing={[Function]}
        placeholder="custom text input placeholder"
        placeholderTextColor="#a3a3a3"
        readOnly={false}
        required={false}
        returnKeyType="done"
        secureTextEntry={false}
        style={
          Object {
            "backgroundColor": "transparent",
            "color": "#171717",
            "flex": 1,
            "fontFamily": undefined,
            "fontSize": 16,
            "fontStyle": "normal",
            "fontWeight": "400",
            "height": "100%",
            "paddingBottom": 8,
            "paddingLeft": 0,
            "paddingRight": 12,
            "paddingTop": 8,
            "width": "100%",
          }
        }
      />
    </View>
  </View>
</RNCSafeAreaProvider>
`;

exports[`CustomTextInput tests renders on ios 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    dataSet={Object {}}
    style={
      Object {
        "width": "100%",
      }
    }
  >
    <View
      dataSet={Object {}}
      feedbackId="field-1-feedback"
      hasFeedbackText={false}
      hasHelpText={false}
      helpTextId="field-1-helptext"
      isDisabled={false}
      isInvalid={false}
      isReadOnly={false}
      isRequired={false}
      labelId="field-1-label"
      nativeID="field-1-label"
      setHasFeedbackText={[Function]}
      setHasHelpText={[Function]}
      style={
        Object {
          "flexDirection": "row",
          "justifyContent": "flex-start",
          "marginBottom": 4,
          "marginTop": 4,
        }
      }
    >
      <Text
        dataSet={Object {}}
        style={
          Object {
            "backgroundColor": undefined,
            "color": "#737373",
            "fontFamily": undefined,
            "fontSize": 14,
            "fontStyle": "normal",
            "fontWeight": "500",
            "letterSpacing": 0,
            "lineHeight": 21,
            "textDecorationLine": undefined,
          }
        }
      >
        test custom text input
      </Text>
    </View>
    <View
      dataSet={Object {}}
      isFocused={false}
      style={
        Object {
          "alignItems": "center",
          "borderBottomWidth": 1,
          "borderColor": "#d4d4d4",
          "borderRadius": 0,
          "borderWidth": 0,
          "flexDirection": "row",
          "overflow": "hidden",
        }
      }
    >
      <TextInput
        accessible={true}
        blurOnSubmit={true}
        dataSet={Object {}}
        disabled={false}
        editable={true}
        isRequired={false}
        maxLength={255}
        multiline={true}
        nativeID="field-1-input"
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onKeyPress={[Function]}
        onSubmitEditing={[Function]}
        placeholder="custom text input placeholder"
        placeholderTextColor="#a3a3a3"
        readOnly={false}
        required={false}
        returnKeyType="done"
        secureTextEntry={false}
        style={
          Object {
            "backgroundColor": "transparent",
            "color": "#171717",
            "flex": 1,
            "fontFamily": undefined,
            "fontSize": 16,
            "fontStyle": "normal",
            "fontWeight": "400",
            "height": "100%",
            "paddingBottom": 8,
            "paddingLeft": 0,
            "paddingRight": 12,
            "paddingTop": 8,
            "width": "100%",
          }
        }
      />
    </View>
  </View>
</RNCSafeAreaProvider>
`;
